#!/usr/bin/python

import sys
import os
import optparse
import tempfile
import hashlib
import base64
import subprocess
import time

import pyfscache

class hash_set:
    def __init__(self):
        self.data = ''

    def do_hash(self, s):
        h = hashlib.md5()
        h.update(s)
        return base64.b64encode(h.digest())

    def hash_key(self, key, value):
        self.data = self.data + self.do_hash(key + '=' + self.do_hash(value))

    def hash_argv(self, argv):
        h = ''.join(map(self.do_hash, argv))
        self.hash_key('argv', h)

    def hash_environment(self, option, opt, value, parser):
        # Separate missing and zero values
        if value in os.environ and os.environ[value]:
            hash_arg = value + '=' + self.do_hash(os.environ[value])
        else:
            hash_arg = value
        self.hash_key('env', hash_arg)

    def hash_file_contents(self, option, opt, value, parser):
        # FIXME: handle IOError
        contents = open(value).read()
        hash_arg = value + '=' + self.do_hash(contents)
        self.hash_key('file', hash_arg)

hs = hash_set()

parser = optparse.OptionParser()
parser.add_option('-e', '--environment', action='callback', callback=hs.hash_environment, type='str')
parser.add_option('-f', '--file-contents', action='callback', callback=hs.hash_file_contents, type='str')
(options, args) = parser.parse_args()
cmd_argv = args

hs.hash_argv(cmd_argv)

inp = sys.stdin.read()
hs.hash_key('stdin', inp)

cache = pyfscache.FSCache('cache/', days=10)
print('hash = {}'.format(hs.data))
try:
    result = cache[hs.data]
    print('From cache')
    sys.stdout.write(result)
except KeyError:
    tmp = tempfile.NamedTemporaryFile(delete=True)
    cmd_proc = subprocess.Popen(cmd_argv, stdout=tmp)
    cat_proc = subprocess.Popen(['/usr/bin/tail', '-f', tmp.name])

    with open(tmp.name) as f:
        cmd_proc.wait()
        # FIXME: immediately output stdout, do not wait for cmd_proc exit
        # use another subprocess 'tail -f'
        output_data = f.read()
    # FIXME: pyfscache doesn't handle MT races
    cache[hs.data] = output_data
